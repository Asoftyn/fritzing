
import grails.converters.deep.JSON   // use the deep converter to get the data from subobjects

class BootStrap {
	static Double pricePerSqMm = 0.0054689636313919
	static Double pricePerQualityCheck = 5.0

	def init = { servletContext ->
     
		
		// delete the set of Destinations before we initialize them again
		com.g2one.fab1.Destination.list().each { dest -> dest.delete(flush:true) }
		
		def destinations = []
	
		def d = new com.g2one.fab1.Destination(name:"Germany", taxRate:0.19)	

		// note: 'addToShippingRates' is a function generated by Grails

		d.addToShippingRates(minQuantity:1, maxQuantity:4, rate:4.50)
			.addToShippingRates(minQuantity:5, maxQuantity:10, rate:4.50)
			.addToShippingRates(minQuantity:11, maxQuantity:20, rate:7.00)
			.addToShippingRates(minQuantity:21, maxQuantity:null, rate:10.00)
			.save(flush:true)
		destinations.add(d)
					
		d = new com.g2one.fab1.Destination(name:"Europe (EU)", taxRate:0.19)
		d.addToShippingRates(minQuantity:1, maxQuantity:2, rate:4.50)
			.addToShippingRates(minQuantity:3, maxQuantity:4, rate:9.50)
			.addToShippingRates(minQuantity:5, maxQuantity:10, rate:18.00)
			.addToShippingRates(minQuantity:11, maxQuantity:20, rate:35.00)
			.addToShippingRates(minQuantity:21, maxQuantity:null, rate:45.00)
			.save(flush:true)
		destinations.add(d)
		
		d = new com.g2one.fab1.Destination(name:"Worldwide", taxRate:0.0)
		d.addToShippingRates(minQuantity:1, maxQuantity:2, rate:14.50)
			.addToShippingRates(minQuantity:3, maxQuantity:4, rate:14.50)
			.addToShippingRates(minQuantity:5, maxQuantity:10, rate:35.00)
			.addToShippingRates(minQuantity:11, maxQuantity:20, rate:45.00)
			.addToShippingRates(minQuantity:21, maxQuantity:null, rate:65.00)
			.save(flush:true)
		destinations.add(d)
				
		// from GSPs use application.getAttribute("...")
		
		servletContext.setAttribute("destinations", destinations)
		servletContext.setAttribute("destinationData", "${destinations as JSON}")
		
		servletContext.setAttribute("pricePerSqMm", pricePerSqMm)
		servletContext.setAttribute("pricePerQualityCheck", pricePerQualityCheck)
		
	}
     
	def destroy = {
	}
} 